#include "types.h"
#include "compiler/AST/ast.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

TypeDescriptor::TypeDescriptor(TypeKind kind, const std::wstring& name):
kind(kind),
name(name) {
}
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PrimaryTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
const PrimaryTypeDescriptor::Pointer PrimaryTypeDescriptor::Int = std::make_shared<PrimaryTypeDescriptor>(L"int");

PrimaryTypeDescriptor::PrimaryTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::primary, name) {
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ClassTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

ClassTypeDescriptor::ClassTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::class_, name) {
}
