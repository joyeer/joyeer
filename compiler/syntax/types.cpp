#include "types.h"
#include "compiler/AST/ast.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

TypeDescriptor::TypeDescriptor(TypeKind kind, const std::wstring& name):
kind(kind),
name(name) {
}
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PrimaryTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
const PrimaryTypeDescriptor::Pointer PrimaryTypeDescriptor::Int = std::make_shared<PrimaryTypeDescriptor>(L"int");

PrimaryTypeDescriptor::PrimaryTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::primaryType, name) {
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ClassTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

ClassTypeDescriptor::ClassTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::classType, name) {
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TypeFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeFactory::TypeFactory():
types() {
}

ClassTypeDescriptor::Pointer TypeFactory::createClassType(const std::wstring &name) {
    ClassTypeDescriptor::Pointer type = std::make_shared<ClassTypeDescriptor>(name);
    //TODO: find the
    types[name] = type;
    return type;
}
