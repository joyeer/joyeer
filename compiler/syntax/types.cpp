#include "types.h"
#include "compiler/AST/ast.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

TypeDescriptor::TypeDescriptor(TypeKind kind, const std::wstring& name):
kind(kind),
name(name) {
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SourceFileTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
SourceFileTypeDescriptor::SourceFileTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::sourceType, name){
    
}
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PrimaryTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
const PrimaryTypeDescriptor::Pointer PrimaryTypeDescriptor::Int = std::make_shared<PrimaryTypeDescriptor>(L"int");

PrimaryTypeDescriptor::PrimaryTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::primaryType, name) {
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FieldTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
FieldTypeDescriptor::FieldTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::memberFieldType, name) {
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ClassTypeDescriptor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

ClassTypeDescriptor::ClassTypeDescriptor(const std::wstring& name):
TypeDescriptor(TypeKind::classType, name) {
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TypeFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
TypeFactory::TypeFactory():
types() {
}

ClassTypeDescriptor::Pointer TypeFactory::createClassType(const std::wstring &name) {
    ClassTypeDescriptor::Pointer type = std::make_shared<ClassTypeDescriptor>(name);
    //TODO: find the duplicate type and report error
    types[name] = std::static_pointer_cast<TypeDescriptor>(type);
    return type;
}

SourceFileTypeDescriptor::Pointer TypeFactory::createSourceFileType(const std::wstring &name) {
    SourceFileTypeDescriptor::Pointer type = std::make_shared<SourceFileTypeDescriptor>(name);
    return type;
}

FieldTypeDescriptor::Pointer TypeFactory::createFieldType(const std::wstring &name) {
    FieldTypeDescriptor::Pointer type = std::make_shared<FieldTypeDescriptor>(name);
    return type;
}
