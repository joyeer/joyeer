//
// Created by Qing Xu on 2021/10/16.
//

#ifndef __joyeer_compiler_typedef_h__
#define __joyeer_compiler_typedef_h__

#include "joyeer/compiler/opcode.h"

#include <string>
#include <utility>

enum JrTypeType : uint8_t {
    Void = 0x00,
    Nil,
    Boolean,
    Integer,
    Long,
    Any,

    Variable,
    Block,
    Class,
    Module,
    Function,
};

// typedef is generated by compiler, which represent a **Type**
struct JrTypeDef {
    using Ptr = std::shared_ptr<JrTypeDef>;
    const std::string name;
    JrTypeType type;
    int32_t  address;

protected:
    JrTypeDef(std::string  name, JrTypeType type):
        name(std::move(name)),
        type(type),
        address(-1) {
    }
};

// represent Nil type
struct JrNilTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrNilTypeDef>;
    JrNilTypeDef();
};

// represent Void type
struct JrVoidTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrVoidTypeDef>;
    JrVoidTypeDef();
};

// represent Any type
struct JrAnyTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrAnyTypeDef>;
    JrAnyTypeDef(): JrTypeDef("Any", JrTypeType::Any) {}
};

enum JrFuncTypeType : uint8_t {
    C_Func,
    VM_Func
};

struct JrVarTypeDef: JrTypeDef {
    using Ptr = std::shared_ptr<JrVarTypeDef>;

    int position = -1;

    explicit JrVarTypeDef(std::string  name):
            JrTypeDef(name, JrTypeType::Variable) {}
};


// Represent Int type
struct JrIntTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrIntTypeDef>;
    JrIntTypeDef();
};

// Represent Bool type
struct JrBoolTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrBoolTypeDef>;
    JrBoolTypeDef();
};

// Represent Statement Block Type
struct JrBlockTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrBlockTypeDef>;

    std::vector<JrVarTypeDef::Ptr> localVars; // local-variables

    explicit JrBlockTypeDef();
};

// Represent Function type (include class's function type)
struct JrFuncTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrFuncTypeDef>;

    JrFuncTypeType funcType;
    JrBlockTypeDef::Ptr block;
    std::vector<JrTypeDef::Ptr> paramTypes;
    JrTypeDef::Ptr returnType;
    std::vector<Instruction> instructions;

    explicit JrFuncTypeDef(const std::string& name);
};

struct JrClassTypeDef : JrTypeDef {
    using Ptr = std::shared_ptr<JrClassTypeDef>;

    explicit JrClassTypeDef(const std::string& name);

    static JrClassTypeDef::Ptr create(const std::string& name) {
        return std::make_shared<JrClassTypeDef>(name);
    }
};

struct JrFileModuleTypeDef : JrClassTypeDef {
    using Ptr = std::shared_ptr<JrFileModuleTypeDef>;

    explicit JrFileModuleTypeDef(const std::string& name);
};

namespace BuildIn::TypeDef {
    // call CompilerService to register the following TypeDef
    [[maybe_unused]] static const JrVoidTypeDef::Ptr Void = std::make_shared<JrVoidTypeDef>();
    [[maybe_unused]] static const JrAnyTypeDef::Ptr Any = std::make_shared<JrAnyTypeDef>();
    [[maybe_unused]] static const JrNilTypeDef::Ptr Nil = std::make_shared<JrNilTypeDef>();
    [[maybe_unused]] static const JrIntTypeDef::Ptr Int = std::make_shared<JrIntTypeDef>();
    [[maybe_unused]] static const JrBoolTypeDef::Ptr Bool = std::make_shared<JrBoolTypeDef>();

    static const JrClassTypeDef::Ptr String = std::make_shared<JrClassTypeDef>("String");

    static const JrFuncTypeDef::Ptr print = std::make_shared<JrFuncTypeDef>("print(message:)");
};

#endif //__joyeer_compiler_typedef_h__
