//
// Created by Qing Xu on 2021/10/16.
//

#ifndef __joyeer_compiler_typedef_h__
#define __joyeer_compiler_typedef_h__

#include "joyeer/compiler/opcode.h"

#include <string>

enum class JrTypeKind : uint8_t {
    Void = 0x00,
    Nil,
    Boolean,
    Integer,
    Long,
    Any,

    FileModule,
    Class,
    Block,
    Function,
    Variable
};

enum JrAccessFlag : uint32_t {
    Public = 0x0001,
    Private = 0x0002,
    Protected = 0x0004,
    Static = 0x0008
};

std::string debugAccessFlag(JrAccessFlag flag);

// typedef is generated by compiler, which represent a **Type**
struct JrType {
    using Ptr = std::shared_ptr<JrType>;

    const std::string name;
    JrTypeKind kind;
    int32_t address;

protected:
    JrType(std::string  name, JrTypeKind kind):
            name(std::move(name)),
            kind(kind),
            address(-1) {
    }
};

// represent Nil kind
struct JrNilType : JrType {
    using Ptr = std::shared_ptr<JrNilType>;
    JrNilType();
};

// represent Void kind
struct JrVoidType : JrType {
    using Ptr = std::shared_ptr<JrVoidType>;
    JrVoidType();
};

// represent Any kind
struct JrAnyType : JrType {
    using Ptr = std::shared_ptr<JrAnyType>;
    JrAnyType(): JrType("Any", JrTypeKind::Any) {}
};

// Variable for Field/LocalVariable declarations
// will be used in ClassDef/FileModuleDef/FuncDef
struct JrVariableType: JrType {
    using Ptr = std::shared_ptr<JrVariableType>;

    int position = -1;
    int parent = -1;
    JrAccessFlag accessFlags = JrAccessFlag::Public;

    void markAsStatic() {
        accessFlags = static_cast<JrAccessFlag>( accessFlags | JrAccessFlag::Static);
    }

    // is a static variable, field only
    [[nodiscard]] bool isStatic() const {
        return (accessFlags & JrAccessFlag::Static) == JrAccessFlag::Static;
    }

    explicit JrVariableType(std::string  name):
            JrType(name, JrTypeKind::Variable) {}
};

// Represent Int kind
struct JrIntType : JrType {
    using Ptr = std::shared_ptr<JrIntType>;
    JrIntType();
};

// Represent Bool kind
struct JrBoolType : JrType {
    using Ptr = std::shared_ptr<JrBoolType>;
    JrBoolType();
};

// Represent Statement Block Type
struct JrBlockType : JrType {
    using Ptr = std::shared_ptr<JrBlockType>;

    int32_t base = -1; // re-located address for block variables
    std::vector<JrVariableType::Ptr> localVars; // local-variables

    JrBlockType();
};

enum JrFuncTypeKind : uint8_t {
    C_Func,
    VM_Func
};

// Represent Function kind (include class's function kind)
struct JrFuncType : JrType {
    using Ptr = std::shared_ptr<JrFuncType>;

    JrFuncTypeKind funcKind;
    JrBlockType::Ptr block;
    std::vector<JrType::Ptr> paramTypes;
    JrType::Ptr returnType;
    std::vector<Instruction> instructions;

    explicit JrFuncType(const std::string& name);
};

struct JrClassType : JrType {
    using Ptr = std::shared_ptr<JrClassType>;

    explicit JrClassType(const std::string& name);

    static JrClassType::Ptr create(const std::string& name) {
        return std::make_shared<JrClassType>(name);
    }
};

struct JrFileModuleType : JrClassType {
    using Ptr = std::shared_ptr<JrFileModuleType>;

    // include ClassDef/FuncDef
    JrBlockType::Ptr block;

    // File initialize instructions
    std::vector<Instruction> instructions;

    explicit JrFileModuleType(const std::string& name);
};

namespace BuildIn::Types {
    // call CompilerService to register the following Types
    [[maybe_unused]] static const JrVoidType::Ptr Void = std::make_shared<JrVoidType>();
    [[maybe_unused]] static const JrAnyType::Ptr Any = std::make_shared<JrAnyType>();
    [[maybe_unused]] static const JrNilType::Ptr Nil = std::make_shared<JrNilType>();
    [[maybe_unused]] static const JrIntType::Ptr Int = std::make_shared<JrIntType>();
    [[maybe_unused]] static const JrBoolType::Ptr Bool = std::make_shared<JrBoolType>();

    static const JrClassType::Ptr String = std::make_shared<JrClassType>("String");

    static const JrFuncType::Ptr print = std::make_shared<JrFuncType>("print(message:)");
};

#endif //__joyeer_compiler_typedef_h__
