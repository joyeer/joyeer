class ListNode {
    var next: ListNode
    var value: Int

    init(next:ListNode, value: Int) {
        self.next = next
        self.value = value
    }
}

var listA = ListNode(next: nil, value: 9)
listA = ListNode(next: listA, value: 7)
listA = ListNode(next: listA, value: 6)

var listB = ListNode(next: nil, value: 3)
listB = ListNode(next: listB, value: 1)
listB = ListNode(next: listB, value: 7)

func addTwoNumber(listA: ListNode, listB: ListNode): ListNode {
    
    var result: ListNode = nil
    var root = nil
    var currentA = listA
    var currentB = listB

    var carry = 0

    while currentA != nil && currentB != nil {
        var addResult = currentA.value + currentB.value + carry
        if addResult > 9 {
            carry = 1
            addResult = addResult - 10
        } else {
            carry = 0
        }
        result = ListNode(next: result, value: addResult)
        if root == nil {
            root = result
        }
        currentA = currentA.next
        currentB = currentB.next
    }

    while currentA != nil {
        var addResult = currentA.value + carry
        if addResult > 9 {
            carry = 1
            addResult = addResult - 10
        } else {
            carry = 0
        }

        result = ListNode(next: result, value: addResult)

        if root == nil {
            root = result
        }
        currentA = currentA.next
    }

    while currentB != nil {
        var addResult = currentB.value + carry
        if addResult > 9 {
            carry = 1
            addResult = addResult - 10
        } else {
            carry = 0
        }

        result = ListNode(next: result, value: addResult)
        if root == nil {
            root = result
        }
        currentB = currentB.next
    }


    if carry == 1 {
        result = ListNode(next: result, value: 1)
    }

    return result
}

var result = addTwoNumber(listA: listA, listB: listB)
while result != nil {
    print(message: result.value)
    result = result.next
}